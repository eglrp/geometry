---------------------------------------
File format for Tango Data Files (.dat)
---------------------------------------

Written by Eric Turner <elturner@indoorreality.com>
on July 3, 2015

------
About:
------

This file type is generated by the data acquisition code on a Google Tango.
It contains both the pose information and the depth scans for each frame
the Tango was collecting data.

------------
Conventions:
------------

The .dat file is represented as binary, Big-Endian (except when otherwise
specified).  It is generated using Java's DataInput structure.  For
conventions on how specific datatypes are formatted, see:

http://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html

--------------
Header Format:
--------------

The file has a minimal header.  It contains a magic number and some
reserved bits:

Value		Format		Size		Endianness
----------------------------------------------------------
magic number	integer		4 bytes		Big-Endian
reserved space	char		2 bytes		Big-Endian
----------------------------------------------------------

The magic number is 74960.

-----------------
File Body Format:
-----------------

The body of this file is a list of scan frames.  Each frame has the
following information about both the pose of the sensor and the received
scan data:

Value			Format		Size		Endianness
------------------------------------------------------------------
timestamp (sec)		double		8 bytes		Big-Endian
position_x (meters)	double		8 bytes		Big-Endian
position_y (meters)	double		8 bytes		Big-Endian
position_z (meters)	double		8 bytes		Big-Endian
quaternion_x		double		8 bytes		Big-Endian
quaternion_y		double		8 bytes		Big-Endian
quaternion_z		double		8 bytes		Big-Endian
quaternion_w		double		8 bytes		Big-Endian
bufsize	(# of bytes)	int		4 bytes		Big-Endian
buf[0].x (millimeters)	float		4 bytes		Little-Endian
buf[0].y (millimeters)	float		4 bytes		Little-Endian
buf[0].z (millimeters)	float		4 bytes		Little-Endian
buf[1].x		float		4 bytes		Little-Endian
buf[1].y		float		4 bytes		Little-Endian
buf[1].z		float		4 bytes		Little-Endian
...			...		...		...
buf[N-1].x		float		4 bytes		Little-Endian
buf[N-1].y		float		4 bytes		Little-Endian
buf[N-1].z		float		4 bytes		Little-Endian
------------------------------------------------------------------

Note that bufsize represents the number of bytes used for the storage
of the buffer of scan data, so 
	
	N = bufsize / (3 * sizeof(float)) = bufsize / 12

Each point in the buffer is represented by three floats (x,y,z), in units
of millimeters, and stored in little-endian format.  All other values in
the file are stored in big-endian format.


