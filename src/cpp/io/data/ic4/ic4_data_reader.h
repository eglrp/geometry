#ifndef IC4_DATA_READER_H
#define IC4_DATA_READER_H

/**
 * @file ic4_data_reader.h
 * @author Eric Turner <elturner@eecs.berkeley.edu>
 *
 * @section DESCRIPTION
 *
 * This file contains definitions for classes used to read and
 * parse the output data files generated by running the data
 * acquisition code with imu.  The Intersense IC4 imu
 * generates a binary data file to be parsed.
 */

#include <fstream>
#include <istream>
#include <ostream>
#include <string>
#include <vector>

/* the following classes are defined in this file */
class ic4_frame_t;
class ic4_reader_t;

/* The following defines are used to represent the data */
#define EULER_ANGLE_SIZE     3
#define QUATERNION_SIZE      4
#define VECTOR_SIZE          3

/**
 * This classes defines one scan line from a Hakuyo IC4 data file
 */
class ic4_frame_t
{
	/* parameters */
	public:

		/* The index of this scan frame */
		unsigned int index;

		/* The imu-specific timestamp for this scan line,
		 * in seconds */
		float timestamp;

		/* The estimate time spent motionless, in seconds */
		float still_time;

		/* The euler rotation angles (yaw, pitch, roll) */
		float euler[EULER_ANGLE_SIZE];

		/* this same rotation expressed as a quaternion */
		float quaternion[QUATERNION_SIZE];

		/* the compass yaw reading */
		float compass_yaw;

		/* The following denote the angular velocity measurements */
		float angular_velocity_body[VECTOR_SIZE];
		float angular_velocity_nav[VECTOR_SIZE];
		float angular_velocity_raw[VECTOR_SIZE];

		/* the following denote the linear acceleration */
		float acceleration_body[VECTOR_SIZE];
		float acceleration_nav[VECTOR_SIZE];
		
		/* the following denote linear velocity measurements */
		float velocity_nav[VECTOR_SIZE];

		/* magnetometer reading */
		float mag_body_frame[VECTOR_SIZE];

		/* internal temperature reading */
		float temperature;

		/* tracking status */
		unsigned char status;

	/* functions */
	public:

		/* constructors */

		/**
		 * Initializes empty frame
		 */
		ic4_frame_t();

		/**
		 * Frees all memory and resources
		 */
		~ic4_frame_t();

		/* initialization */

		/**
		 * Will parse the next scan block out of a binary stream
		 *
		 * The stream is assumed to be a ic4 data file, positioned
		 * at the start of a scan block.  The scan block will be
		 * parsed based to populate this struct.
		 *
		 * @param is           The binary stream to read and parse
		 *
		 * @return    Returns zero on success, non-zero on failure
		 */
		int parse(std::istream& is);
};

/**
 * This defines the ic4_reader_t class to parse a binary imu data file
 */ 
class ic4_reader_t
{
	/* parameters */
	private:

		/* the binary file to parse */
		std::ifstream infile;

		/* the number of frames read so far from the file */
		unsigned int next_index;

		/* the version numbers of the file */
		char major_version;
		char minor_version;

		/* scanner hardware information */
		std::string hardware_model;
		std::string serial_num;

		/* metadata about the capture */
		unsigned int enhancement_level;
		unsigned int sensitivity_level;
		unsigned int buffer_query_time; /* units: milliseconds */

		/* size of file */
		unsigned int num_scans;
		
		/* the following vector stores stream positions, allowing
		 * for random access of frames in the file */
		std::vector<std::streampos> frame_locs;

	/* functions */
	public:

		/* constructors */

		/**
		 * Constructs empty class
		 */
		ic4_reader_t();

		/**
		 * Frees all allocated memory and resources
		 */
		~ic4_reader_t();

		/**
		 * Open file for parsing. Verifies file correctly formatted.
		 *
		 * Will open the selected file, and read the header of
		 * this file.  Will only return success if the file
		 * is verified to be a imu binary data file.  After
		 * this is called, will be ready to read scan frames from
		 * file.
		 *
		 * @param filename The path the imu binary data file
		 *
		 * @return     Returns zero on success, non-zero on failure
		 */
		int open(const std::string& filename);

		/**
		 * Parses the next frame from the file
		 *
		 * Will read the next frame from the file and populate
		 * the specified frame struct with its information.
		 *
		 * @param frame The struct to populate with the next frame
		 *
		 * @return     Returns zero on success, non-zero on failure
		 */
		int next(ic4_frame_t& frame);

		/**
		 * Parses the frame at the specified index in file
		 *
		 * Will read the frame at the specified index from the
		 * file and store the result in the specified struct.
		 * After calling this function with argument i, calling
		 * the next() function will give frame i+1.
		 *
		 * @param i      The index of the frame of interest
		 * @param frame  Where to store the i'th frame
		 *
		 * @return     Returns zero on success, non-zero on failure
		 */
		int get(unsigned int i, ic4_frame_t& frame);

		/**
		 * Retrieves all timestamps of remaining frames.
		 *
		 * Calling this function after opening the file
		 * will give the timestamps for all frames in this
		 * file.  After this function call, this file will
		 * be at eof.
		 *
		 * If one or more frames have been read, then calling
		 * this function will return the timestamps for the
		 * remaining frames.
		 *
		 * @param times   Where to store the timestamps
		 *                (units: seconds)
		 *
		 * @return  Returns zero on success, non-zero on failure.
		 */
		int parse_timestamps(std::vector<double>& times);

		/**
		 * Returns true iff end of file reached.
		 *
		 * Will pass the eof flag from the file stream as
		 * the return value of this function.
		 *
		 * @return     Returns true iff end-of-file reached
		 */
		bool eof() const;

		/**
		 * Closes the stream and frees resources
		 *
		 * Will close any open file streams and free allocated
		 * arrays in memory.
		 */
		void close();
};

#endif
