#include "node_set.h"
#include <geometry/octree/octree.h>
#include <geometry/octree/octnode.h>
#include <geometry/octree/octtopo.h>
#include <util/progress_bar.h>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
#include <set>

/**
 * @file   node_set.cpp
 * @author Eric Turner <elturner@eecs.berkeley.edu>
 * @brief  Represents a subset of nodes from an octree
 *
 * @section DESCRIPTION
 *
 * This file declares the node_set_t class, which is used to
 * represent a subset of nodes from an octree, along with
 * relavant functions that analyze or modify these nodes.
 */

using namespace std;

/*--------------------------*/
/* function implementations */
/*--------------------------*/

/*-----------*/
/* debugging */
/*-----------*/

/**
 * Helper function for exporting nodes to Wavefront OBJ files
 *
 * @param os   The stream to write to
 * @param node The node geometry to export
 * @param r    Red component of color
 * @param g    Green component of color
 * @param b    Blue component of color
 */
void write_node_to_obj(ostream& os, octnode_t* node, int r, int g, int b)
{
	size_t i;
	double hw;
	int cc[8][3] = { /* this list indicates corner corner pos */
			{ 1, 1, 1},
			{ 1,-1, 1},
			{-1,-1, 1},
			{-1, 1, 1},
			{ 1, 1,-1},
			{ 1,-1,-1},
			{-1,-1,-1},
			{-1, 1,-1}	};

	/* export cube of this node */

	/* vertices of cube */
	hw = node->halfwidth;
	for(i = 0; i < 8; i++)
		os << "v " << (node->center(0)+cc[i][0]*hw)
		   <<  " " << (node->center(1)+cc[i][1]*hw)
		   <<  " " << (node->center(2)+cc[i][2]*hw)
		   <<  " " << r << " " << g << " " << b
		   << endl;
		
	/* faces of the cube */
	os << "f -1 -4 -3 -2" << endl
	   << "f -5 -6 -7 -8" << endl
	   << "f -2 -3 -7 -6" << endl
	   << "f -1 -5 -8 -4" << endl
	   << "f -3 -4 -8 -7" << endl
	   << "f -6 -5 -1 -2" << endl;
}

int node_set_t::writeobj(const string& filename) const
{
	set<octnode_t*>::iterator it;
	ofstream outfile;
	int r, g, b;

	/* open file for writing */ 
	outfile.open(filename.c_str());
	if(!(outfile.is_open()))
		return -1;

	/* prepare file */
	outfile << "# This file auto-generated by Eric Turner's" << endl
	        << "# geometry code for UC Berkeley's VIP Lab." << endl
	        << "#" << endl
	        << "# [node_set_t::writeobj]" << endl
	        << endl << endl;

	/* come up with random color for this set */
	r = (64 + (rand() % 128));
	g = (64 + (rand() % 128));
	b = (64 + (rand() % 128));

	/* iterate through the nodes */
	for(it = this->nodes.begin(); it != this->nodes.end(); it++)
	{
		/* only proceed if exterior */
		if((*it)->data == NULL)
			continue;
		if((*it)->data->is_interior())
			continue;

		/* write node */
		write_node_to_obj(outfile, *it, r, g, b);
	}

	/* success */
	outfile.close();
	return 0;
}
