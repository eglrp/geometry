function tangoscans = read_tango_data(filename)
	% tangoscans = READ_TANGO_DATA(filename)
	%
	%	Will parse the .dat file generated by the
	%	tango collection code and store the information
	%	in the returned structure.
	%
	% arguments:
	%
	%	filename -	The file on disk to read
	%
	% output:
	%
	%	tangoscans -	The structure array containing the data.
	%			Each element in this array represents
	%			a single scan frame.  The structure for
	%			each element contains the following
	%			fields:
	%
	%			timestamp	-	time in seconds
	%
	%			position	-	size 3x1, in meters
	%
	%			quaternion	-	size 4x1, [x,y,z,w]
	%
	%			depthbuf	-	size 3xN, each
	%						column is [x;y;z]
	%						in meters.
	% author:
	%
	%	Written by Eric Turner <elturner@indoorreality.com>
	%	Created July 15, 2015
	%

	% attempt to open the file for binary reading
	fid = fopen(filename, 'rb', 'ieee-be');
	if(fid < 0)
		error(['Unable to open file ', filename]);
	end

	% check the header of the file, to make sure it is of the
	% correct file format
	magic = fread(fid, 1, 'int32');
	if(magic ~= 74960)
		error(['Invalid file format.  Bad magic number: ', ...
			num2str(magic)]);
	end

	% read through the reserved space
	junk = fread(fid, 2, 'uchar');

	% next is the list of scan frames.  We don't know how many
	% frames there are, so we will need to iterate through each
	% one and append it to the list (this is going to be slow)
	tangoscans = struct('timestamp', cell(0), ...
				'position', cell(0), ...
				'quaternion', cell(0), ...
				'depthbuf', cell(0));
	
	% read as long as the file as info
	while(~feof(fid))

		% read the next frame's pose info
		tangoscans(end+1).timestamp = fread(fid, 1, 'double');
		tangoscans(end).position    = fread(fid, 3, 'double');
		tangoscans(end).quaternion  = fread(fid, 4, 'double');

		% get the size of the depth buffer
		bufsize_in_bytes = fread(fid, 1, 'int32');
		bufsize_in_floats = bufsize_in_bytes  / 4; % float=4 bytes
		bufsize_in_points = bufsize_in_floats / 3; % [x y z]

		% read in the buffer.
		% NOTE:  the buffer is in little-endian
		tangoscans(end).depthbuf ...
			= fread(fid, [3 bufsize_in_points], 'float', ...
					0, 'ieee-le');
	end

	% clean up
	fclose(fid);
end
