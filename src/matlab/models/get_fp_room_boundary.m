function [XV, YV] = get_fp_room_boundary(floorplan, room_index)
	% [XV, YV] = GET_FP_ROOM_BOUNDARY(floorplan, room_index)
	%
	%	Computes the bounding polygon for the specified room
	%	from the given floorplan structure.
	%
	% arguments:
	%
	%	floorplan -	The floorplan structure.  This should
	%			be generated by calling read_fp() on
	%			a valid .fp file.
	%
	%	room_index -	The index of the room to query.  This
	%			value should be between 1 and 
	%			floorplan.num_rooms.
	%
	% output:
	%
	%	XV 	-	The list of the x-coordinates of the
	%			vertices of the boundary of the room
	%
	%	YV 	-	The list of the y-coordinates of the
	%			vertices of the boundary of the room
	%
	% example:
	%
	%	floorplan = read_fp('example.fp');
	%	[XV,YV] = GET_FP_ROOM_BOUNDARY(floorplan, 1);
	%	x = rand();
	%	y = rand();
	%	if(inpolygon(x, y, XV, YV))
	%		fprintf('Point (%f,%f) is in room #1\n',x,y);
	%	end
	%
	% author:
	%
	%	Written by Eric Turner <elturner@eecs.berkeley.edu>
	%	Last edited November 18, 2014
	%

	% check if the room index is valid
	if(room_index <= 0 || room_index > floorplan.num_rooms)
		error('Room index is out-of-bounds');
	end

	% get the tri rep for the given room
	room_tris = floorplan.tris(floorplan.room_inds == room_index, :);
	warning('off', 'MATLAB:TriRep:PtsNotInTriWarnId');
	TR = TriRep(room_tris, floorplan.verts(:,1), floorplan.verts(:,2));
	warning('on', 'MATLAB:TriRep:PtsNotInTriWarnId');
	
	% find the free boundary
	edges = freeBoundary(TR); % size Mx2

	% convert to vertex positions
	XV = floorplan.verts( edges(:,1) , 1);
	YV = floorplan.verts( edges(:,1) , 2);
end
